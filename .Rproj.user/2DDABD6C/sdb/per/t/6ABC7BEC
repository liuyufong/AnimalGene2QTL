{
    "collab_server" : "",
    "contents" : "---\ntitle: \"AnimalGene2QTL\"\noutput:\nhtml_document:\nhighlight: pygments\ntoc: true\n---\n%\\VignetteEngine{knitr::knitr}\n%\\VignetteIndexEntry{AnimalGene2QTL}\n\n#`Introduction`\n\nThe `AnimalGene2QTL` provides an interface to retrieve QTL data ,\ngene data , SNP data.The package enables retrieval of large amounts\nof data in a uniform way without the needto know the underlying\ndatabase schemas or write complex SQL queries.\n\n#`Quick start`\n\n## `Viewing AnimalGene2QTL dataset`\nEvery analysis with `AnimalGene2QTL` starts with Viewing a\n`AnimalGene2QTL` dataset to use.\nThe function listQTL will display all available QTL dataset.\n\n```{r eval=TRUE}\nlibrary(AnimalGene2QTL)\nlistQTL()\n```\n\n## `How to build a QTL query`\nThe `getAnimalQTL` function has six arguments that need to be\nintroduced:\n*gene_filters*, *qtl_attributes*, *gene_values*, *data_set*\n, *snp*, *snp_attributes*.\n\n*gene_filters* define a restriction on the query.\nFor example you want to restrict the output to all QTL located\non the human X chromosome\nthen the `gene_filters`:`chromosome_name` can be used with gene\nvalues `X`.\nThe `listGeneAF` function displays all available gene filters\nin the selected dataset.\n*qtl_attributes* define the values we are interested in to retrieve.\nFor example we want to retrieve the QTL ID or QTL name.\nThe `listQTLAF` function displays all available QTL attributes\nin the selected dataset.\n\n```{r eval=TRUE}\nattributes <- listQTLAF()\nhead(attributes)\nfilters <- listGeneAF(1)\nhead(filters)\n```\n\n### `getAnimalQTL() function`\nThe `getAnimalQTL` function is the main query function in\n`AnimalGene2QTL`.\nIt has four main arguments:\n* **qtl_attributes**:is a vector of attributes that one\nwants to retrieve (= the output of the query).\n* **gene_filters**:is a vector of filter that one wil use\nas input to the query.\n* **gene_values**:a vector of values for the *gene_filters*.\nIn case multple filter are in use, the *gene_values* argument\nrequires a list of values where each position\nin the list corresponds to the position of the filters in the\n*gene_filters* argument (see examples below).\n* **data_set**:choose which animal QTL you want to retrieve.\nNow that we selected a `AnimalGene2QTL` dataset, and know\nabout `qtl_attributes`,\n`gene_filters`, and the `gene_values` for `gene_filters`;\nwe can build a `AnimalGene2QTL`\nquery. Let us make an easy query for the following problem:\nWe have a list of gene identifiers from the Ensembl and we\nwant to retrieve the QTL identifiers.\nLet us now run the query:\n\n```{r eval=TRUE}\ngeneid <- c(\"ENSBTAG00000009851\", \"ENSBTAG00000005101\", \"ENSBTAG00000036262\")\nqtl <- getAnimalQTL(qtl_attributes=c('QTL_ID'),gene_filters='ensembl_gene_id'\n,gene_values=geneid,data_set=1);\nhead(qtl);\n```\n\n## `Examples of AnimalGene2QTL queries`\nIn the sections below a variety of example\nqueries are described.\nEvery example is written\nas a task, and we have to come up with a `AnimalGene2QTL`\nsolution to the problem.\n\n### `Task 1: Retrieve all identifiers of genes by QTL`\n`identifiers:\"64577\",\"2199\",\"2354\"`\n\n```{r eval=TRUE}\nqtlid <- c(\"64577\",\"2199\",\"2354\");\ngene <- getAnimalGene(gene_attributes=\"ensembl_gene_id\",qtl_filters=c(\"QTL_ID\")\n,qtl_values=qtlid, data_set=2);\nhead(gene)\n```\n\n### `Task 2: Retrieve all identifiers of SNP by QTL`\n`identifiers:\"4097\"`\n\n```{r eval=TRUE}\nsnp <- getSNPbyQTL('refsnp_id','QTL_ID','4097',2);\nhead(snp)\n```",
    "created" : 1500631283073.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2103270248",
    "id" : "6ABC7BEC",
    "lastKnownWriteTime" : 1500716606,
    "last_content_update" : 1500716606,
    "path" : "D:/D/R_program/bioconductor/AnimalGene2QTL/vignettes/AnimalGene2QTL.Rmd",
    "project_path" : "vignettes/AnimalGene2QTL.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}